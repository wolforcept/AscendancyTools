buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "$forgegradle_version", changing: true
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'

version = "$mod_version"
group = "wolforce.$mod_id"
archivesBaseName = "$mod_id"
java.toolchain.languageVersion = JavaLanguageVersion.of("$java_version")

// All jar files from this folder will be added automatically as runtime mod dependencies
String extraModsDir = "extra-mods-${minecraft_version}"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "$minecraft_version"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') 
    
    runs {
        client {
            args '--username', 'Wolforce'
            taskName "$mod_id $minecraft_version client"
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', "$mod_id"

            mods {
                mod {
                    source sourceSets.main
                }
            }
        }

        server {
            args '--username', 'WolforcePT'
            taskName "$mod_id $minecraft_version client2"
            workingDirectory project.file('run_server')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', "$mod_id"

            mods {
                mod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	flatDir {
		name "extra-mods"
		dir file(extraModsDir)
	}
    maven {
        name 'ForgeFS'
        url 'https://files.minecraftforge.net/maven'
    }
    maven {
        name 'prog'
        url 'http://dvs1.progwml6.com/files/maven'
        allowInsecureProtocol = true
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'CurseMaven'
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'HWYLA'
        url "https://maven.tehnut.info"
    }
    maven {
		url 'https://maven.blamejared.com' 
	}
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"
    compileOnly fg.deobf("mezz.jei:jei-$minecraft_version:$jei_version:api")
    runtimeOnly fg.deobf("mezz.jei:jei-$minecraft_version:$jei_version")
    //runtimeOnly fg.deobf("curse.maven:nbteditor-552423:3722015")
    //runtimeOnly fg.deobf("kancho:nbteditor:1.5.0")
    
    // Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
	for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
		def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
		def versionSep = basename.lastIndexOf('-')
		assert versionSep != -1
		def artifactId = basename.substring(0, versionSep)
		def version = basename.substring(versionSep + 1)
		runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
	}
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : "$mod_id",
            "Specification-Vendor"    : "$mod_id",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "$mod_id",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
